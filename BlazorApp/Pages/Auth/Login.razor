@page "/Login"


<div class="mx-auto rounded border p-4" style="width: 400px; margin: 60px;">
    <h3 class="text-center mb-3">Login</h3>
    <hr />

    @if (error.Length > 0)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>@error</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <input type="email" class="form-control" id="email" @bind="email" placeholder="Enter email" required />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" @bind="password" placeholder="Enter password" required />
    </div>

    <div class="row">
        <div class="col d-grid">
            <button class="btn btn-primary w-100" @onclick="LoginAsync">Login</button>
        </div>
        <div class="col d-grid">
            <a class="btn btn-outline-primary w-100" href="/" role="button">Cancel</a>
        </div>
    </div>

</div>


@inject AuthenticationStateProvider provider
@inject NavigationManager navManager

@code {
    public string email = string.Empty;
    public string password = string.Empty;
    public string error = string.Empty;

    private async Task LoginAsync()
    {
        var authStateProvider = provider as CustomAuthStateProvider;
        var formResult = await authStateProvider!.LoginAsync(email, password);

        if (formResult.Success)
            navManager.NavigateTo("/");
        else
            error = formResult.Errors[0];
    }
}
